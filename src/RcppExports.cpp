// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// LoS_reference
Rcpp::IntegerVector LoS_reference(const int x0_ref, const int y0_ref, const int r, const int nc_ref);
RcppExport SEXP _protoVS_LoS_reference(SEXP x0_refSEXP, SEXP y0_refSEXP, SEXP rSEXP, SEXP nc_refSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type x0_ref(x0_refSEXP);
    Rcpp::traits::input_parameter< const int >::type y0_ref(y0_refSEXP);
    Rcpp::traits::input_parameter< const int >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type nc_ref(nc_refSEXP);
    rcpp_result_gen = Rcpp::wrap(LoS_reference(x0_ref, y0_ref, r, nc_ref));
    return rcpp_result_gen;
END_RCPP
}
// VGVI_test_old
std::vector<double> VGVI_test_old(Rcpp::S4& dsm, const Rcpp::NumericVector& dsm_values, Rcpp::S4& greenspace, const Rcpp::NumericVector& greenspace_values, const Rcpp::IntegerVector& x0, const Rcpp::IntegerVector& y0, const Rcpp::NumericVector& h0, const int radius, const int fun, const double m, const double b, const int ncores, const bool display_progress);
RcppExport SEXP _protoVS_VGVI_test_old(SEXP dsmSEXP, SEXP dsm_valuesSEXP, SEXP greenspaceSEXP, SEXP greenspace_valuesSEXP, SEXP x0SEXP, SEXP y0SEXP, SEXP h0SEXP, SEXP radiusSEXP, SEXP funSEXP, SEXP mSEXP, SEXP bSEXP, SEXP ncoresSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4& >::type dsm(dsmSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type dsm_values(dsm_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4& >::type greenspace(greenspaceSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type greenspace_values(greenspace_valuesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< const int >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const int >::type fun(funSEXP);
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(VGVI_test_old(dsm, dsm_values, greenspace, greenspace_values, x0, y0, h0, radius, fun, m, b, ncores, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// VGVI_test_new
std::vector<double> VGVI_test_new(Rcpp::S4& dsm, const Rcpp::NumericVector& dsm_values, Rcpp::S4& greenspace, const Rcpp::NumericVector& greenspace_values, const Rcpp::IntegerVector& x0, const Rcpp::IntegerVector& y0, const Rcpp::NumericVector& h0, const int radius, const int fun, const double m, const double b, const int ncores, const bool display_progress);
RcppExport SEXP _protoVS_VGVI_test_new(SEXP dsmSEXP, SEXP dsm_valuesSEXP, SEXP greenspaceSEXP, SEXP greenspace_valuesSEXP, SEXP x0SEXP, SEXP y0SEXP, SEXP h0SEXP, SEXP radiusSEXP, SEXP funSEXP, SEXP mSEXP, SEXP bSEXP, SEXP ncoresSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4& >::type dsm(dsmSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type dsm_values(dsm_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4& >::type greenspace(greenspaceSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type greenspace_values(greenspace_valuesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< const int >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const int >::type fun(funSEXP);
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(VGVI_test_new(dsm, dsm_values, greenspace, greenspace_values, x0, y0, h0, radius, fun, m, b, ncores, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// VGVI_cpp
std::vector<double> VGVI_cpp(Rcpp::S4& dsm, const Rcpp::NumericVector& dsm_values, Rcpp::S4& greenspace, const Rcpp::NumericVector& greenspace_values, const Rcpp::IntegerVector& x0, const Rcpp::IntegerVector& y0, const Rcpp::NumericVector& h0, const int radius, const int fun, const double m, const double b, const int ncores, const bool display_progress);
RcppExport SEXP _protoVS_VGVI_cpp(SEXP dsmSEXP, SEXP dsm_valuesSEXP, SEXP greenspaceSEXP, SEXP greenspace_valuesSEXP, SEXP x0SEXP, SEXP y0SEXP, SEXP h0SEXP, SEXP radiusSEXP, SEXP funSEXP, SEXP mSEXP, SEXP bSEXP, SEXP ncoresSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4& >::type dsm(dsmSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type dsm_values(dsm_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4& >::type greenspace(greenspaceSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type greenspace_values(greenspace_valuesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< const int >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const int >::type fun(funSEXP);
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(VGVI_cpp(dsm, dsm_values, greenspace, greenspace_values, x0, y0, h0, radius, fun, m, b, ncores, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// viewshed_test_old
double viewshed_test_old(Rcpp::S4& dsm, const Rcpp::NumericVector& dsm_values, const Rcpp::IntegerVector& x0, const Rcpp::IntegerVector& y0, const Rcpp::NumericVector& h0, const int radius);
RcppExport SEXP _protoVS_viewshed_test_old(SEXP dsmSEXP, SEXP dsm_valuesSEXP, SEXP x0SEXP, SEXP y0SEXP, SEXP h0SEXP, SEXP radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4& >::type dsm(dsmSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type dsm_values(dsm_valuesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< const int >::type radius(radiusSEXP);
    rcpp_result_gen = Rcpp::wrap(viewshed_test_old(dsm, dsm_values, x0, y0, h0, radius));
    return rcpp_result_gen;
END_RCPP
}
// viewshed_test_new
double viewshed_test_new(Rcpp::S4& dsm, const Rcpp::NumericVector& dsm_values, const Rcpp::IntegerVector& x0, const Rcpp::IntegerVector& y0, const Rcpp::NumericVector& h0, const int radius, const int ncores);
RcppExport SEXP _protoVS_viewshed_test_new(SEXP dsmSEXP, SEXP dsm_valuesSEXP, SEXP x0SEXP, SEXP y0SEXP, SEXP h0SEXP, SEXP radiusSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4& >::type dsm(dsmSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type dsm_values(dsm_valuesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< const int >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(viewshed_test_new(dsm, dsm_values, x0, y0, h0, radius, ncores));
    return rcpp_result_gen;
END_RCPP
}
// viewshed_cpp
std::vector<int> viewshed_cpp(Rcpp::S4& dsm, const Rcpp::NumericVector& dsm_values, const Rcpp::IntegerVector& x0, const Rcpp::IntegerVector& y0, const Rcpp::NumericVector& h0, const int radius, const int ncores, const bool display_progress);
RcppExport SEXP _protoVS_viewshed_cpp(SEXP dsmSEXP, SEXP dsm_valuesSEXP, SEXP x0SEXP, SEXP y0SEXP, SEXP h0SEXP, SEXP radiusSEXP, SEXP ncoresSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4& >::type dsm(dsmSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type dsm_values(dsm_valuesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< const int >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(viewshed_cpp(dsm, dsm_values, x0, y0, h0, radius, ncores, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// viewshed_cpp2
std::vector<double> viewshed_cpp2(Rcpp::S4& dsm, const Rcpp::NumericVector& dsm_values, const Rcpp::IntegerVector& x0, const Rcpp::IntegerVector& y0, const Rcpp::NumericVector& h0, const int radius, const int ncores, const bool display_progress);
RcppExport SEXP _protoVS_viewshed_cpp2(SEXP dsmSEXP, SEXP dsm_valuesSEXP, SEXP x0SEXP, SEXP y0SEXP, SEXP h0SEXP, SEXP radiusSEXP, SEXP ncoresSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4& >::type dsm(dsmSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type dsm_values(dsm_valuesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< const int >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(viewshed_cpp2(dsm, dsm_values, x0, y0, h0, radius, ncores, display_progress));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_protoVS_LoS_reference", (DL_FUNC) &_protoVS_LoS_reference, 4},
    {"_protoVS_VGVI_test_old", (DL_FUNC) &_protoVS_VGVI_test_old, 13},
    {"_protoVS_VGVI_test_new", (DL_FUNC) &_protoVS_VGVI_test_new, 13},
    {"_protoVS_VGVI_cpp", (DL_FUNC) &_protoVS_VGVI_cpp, 13},
    {"_protoVS_viewshed_test_old", (DL_FUNC) &_protoVS_viewshed_test_old, 6},
    {"_protoVS_viewshed_test_new", (DL_FUNC) &_protoVS_viewshed_test_new, 7},
    {"_protoVS_viewshed_cpp", (DL_FUNC) &_protoVS_viewshed_cpp, 8},
    {"_protoVS_viewshed_cpp2", (DL_FUNC) &_protoVS_viewshed_cpp2, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_protoVS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
